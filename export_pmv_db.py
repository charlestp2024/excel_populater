import mysql.connector
import os
from datetime import datetime
from mysql.connector import Error

# Config
HOST = "192.168.10.220"
PORT = 3306
USER = "charles"
PASSWORD = "Chrl3s!u2024#"


def get_pmv_databases(connection):
    cursor = connection.cursor()
    cursor.execute("SHOW DATABASES LIKE 'pmv%'")
    dbs = [db[0] for db in cursor.fetchall()]
    cursor.close()
    return dbs


def get_tables(connection, db_name):
    cursor = connection.cursor()
    cursor.execute(f"USE `{db_name}`")
    cursor.execute("SHOW TABLES")
    tables = [t[0] for t in cursor.fetchall()]
    cursor.close()
    return tables


def get_create_table(connection, db_name, table_name):
    cursor = connection.cursor()
    cursor.execute(f"USE `{db_name}`")
    cursor.execute(f"SHOW CREATE TABLE `{table_name}`")
    result = cursor.fetchone()
    cursor.close()
    return result[1]  # The CREATE TABLE statement


def fetch_table_data(connection, db_name, table_name):
    cursor = connection.cursor(dictionary=True)
    cursor.execute(f"USE `{db_name}`")
    cursor.execute(f"SELECT * FROM `{table_name}`")
    rows = cursor.fetchall()
    cursor.close()
    return rows


def escape_value(value):
    if value is None:
        return "NULL"
    if isinstance(value, bytes):
        # For binary data, convert to hex
        return f"0x{value.hex()}"
    if isinstance(value, str):
        # Escape single quotes
        return "'" + value.replace("\\", "\\\\").replace("'", "\\'") + "'"
    if isinstance(value, (int, float)):
        return str(value)
    # For other types like datetime, convert to string and quote
    return "'" + str(value).replace("\\", "\\\\").replace("'", "\\'") + "'"


def write_sql_dump(db_name, output_folder, connection):
    dump_file = os.path.join(output_folder, f"{db_name}.sql")
    print(f"Exporting `{db_name}` to `{dump_file}`...")

    tables = get_tables(connection, db_name)

    with open(dump_file, "w", encoding="utf-8") as f:
        f.write(f"-- Dump of database `{db_name}`\n")
        f.write(f"-- Generated by manual Python exporter\n\n")
        f.write(f"CREATE DATABASE IF NOT EXISTS `{db_name}`;\n")
        f.write(f"USE `{db_name}`;\n\n")

        for table in tables:
            f.write(f"--\n-- Table structure for table `{table}`\n--\n\n")

            create_stmt = get_create_table(connection, db_name, table)
            f.write(f"{create_stmt};\n\n")

            f.write(f"--\n-- Dumping data for table `{table}`\n--\n\n")

            rows = fetch_table_data(connection, db_name, table)
            if not rows:
                f.write("\n")
                continue

            # Write INSERT statements in batches of 100 rows for better performance
            batch_size = 100
            for i in range(0, len(rows), batch_size):
                batch = rows[i : i + batch_size]
                columns = batch[0].keys()
                col_list = ", ".join([f"`{col}`" for col in columns])
                f.write(f"INSERT INTO `{table}` ({col_list}) VALUES\n")

                values_list = []
                for row in batch:
                    values = ", ".join(escape_value(row[col]) for col in columns)
                    values_list.append(f"({values})")
                f.write(",\n".join(values_list))
                f.write(";\n\n")

    print(f"‚úÖ Exported `{db_name}` successfully.")


def main():
    try:
        connection = mysql.connector.connect(
            host=HOST, port=PORT, user=USER, password=PASSWORD
        )
        if connection.is_connected():
            print("‚úÖ Connected to MySQL Server")

            pmv_dbs = get_pmv_databases(connection)
            if not pmv_dbs:
                print("No databases starting with 'pmv' found.")
                return

            date_str = datetime.now().strftime("%Y%m%d")
            output_folder = f"PMV_DB_{date_str}"
            os.makedirs(output_folder, exist_ok=True)
            print(f"üìÅ Export folder created: {output_folder}")

            for db in pmv_dbs:
                write_sql_dump(db, output_folder, connection)

    except Error as e:
        print(f"‚ùå Error: {e}")

    finally:
        if connection.is_connected():
            connection.close()
            print("üîå MySQL connection closed.")


if __name__ == "__main__":
    main()
